#!/usr/bin/env ruby

require 'optparse'
options = {}
OptionParser.new do |opt|
  opt.on("-n N", "the number of prime numbers to generate the multiplication table for") { |o| options[:n] = o.to_i }
  opt.on("--test", "run tests and exit") { |o| options[:test] = o }
end.parse!

class Primes

  def self.first(n)
    # returns the first n primes
    # keeps an array of primes and checks new values to see if any of the primes
    # are factors of the new value
    return [] if n < 1
    primes = [2]
    i = 3
    while primes.length < n
      if primes.all? { |p| i % p != 0 }
        primes.push(i)
      end
      i += 2
    end
    primes
  end

end

def print_multiplication_table(rows, cols=nil, file=$stdout)
  # prints the multiplication table generated by two arrays
  # params:
  # - rows: the values for the rows of the multiplication table
  # - cols: the values for the columns of the multiplication table. defaults to rows if not provided
  # - file: a file object with a puts method to write to. defaults to $stdout
  cols = if cols.nil? then rows else cols end

  # this is the widest value and is used to pad the rest of the values so the formatting looks nice
  pad = (rows.max * cols.max).to_s.length + 2

  # print the column values as the first line
  file.puts ' '.rjust(pad) + cols.map { |x| x.to_s.rjust(pad) }.join('')

  # for each row print the row value then the product of that value and all values in cols
  rows.each { |row_val|
    file.puts row_val.to_s.rjust(pad) + cols.map { |x|
      (x * row_val).to_s.rjust(pad)
    }.join('')
  }

end

class TestFile

  def puts(str)
    @written = @written || []
    @written.push(str + "\n")
  end

  def contents
    @written.join('')
  end

end

class Test

  def self.run
    test_primes
    test_print_multiplication_table
    puts "All tests pass"
  end

  def self.test_primes
    fail if Primes.first(10) != [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
  end

  def self.test_print_multiplication_table
    file = TestFile.new
    print_multiplication_table([2, 3], [4, 5], file)

    # first line is the columns
    fail if file.contents.split("\n")[0].scan(/\d+/).map(&:to_i) != [4, 5]

    # first column is rows
    fail if file.contents.split("\n").drop(1).map { |row| row.scan(/\d+/)[0].to_i } != [2,3]

    # other values are products
    fail if file.contents.split("\n").drop(1).map { |row| row.scan(/\d+/).drop(1).map(&:to_i) } != [[8, 10], [12, 15]]
  end

end


def main(options)
  if options[:test]
    return Test.run
  end
  print_multiplication_table(Primes.first(options[:n] || 10))
end


if __FILE__== $PROGRAM_NAME
  main(options)
end
